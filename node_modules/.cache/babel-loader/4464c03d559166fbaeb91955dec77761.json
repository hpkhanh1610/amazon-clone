{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case 'SET_USER':\n      // update the user when they login/logout\n      return { ...state,\n        user: action.user\n      };\n\n    case 'ADD_TO_BASKET':\n      // logic for adding item to basket\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      // logic for removing item from basket\n      // cloned the basket\n      let newBasket = [...state.basket];\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n\n      if (index >= 0) {\n        // item exists in basket, remove it\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove product (id ${action.id}) as its not in basket`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n/* \n\n*/","map":{"version":3,"sources":["/Users/huynh-khanh/khanh/learning/react/amazon-clone/src/reducer.js"],"names":["initialState","basket","user","reducer","state","action","console","log","type","item","newBasket","index","findIndex","basketItem","id","splice","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE,EADkB;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB;;AAKP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,UAAL;AAAiB;AACf,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAFR,OAAP;;AAIF,SAAK,eAAL;AACE;AACA,aAAO,EACL,GAAGE,KADE;AAELH,QAAAA,MAAM,EAAE,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAkBI,MAAM,CAACI,IAAzB;AAFH,OAAP;;AAKF,SAAK,oBAAL;AACE;AAEA;AACA,UAAIC,SAAS,GAAG,CAAC,GAAGN,KAAK,CAACH,MAAV,CAAhB;AAEA,YAAMU,KAAK,GAAGP,KAAK,CAACH,MAAN,CAAaW,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBT,MAAM,CAACS,EAAhE,CAAd;;AAEA,UAAIH,KAAK,IAAI,CAAb,EAAgB;AACd;AACAD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AAED,OAJD,MAIO;AACLL,QAAAA,OAAO,CAACU,IAAR,CACG,4BAA2BX,MAAM,CAACS,EAAG,wBADxC;AAGD;;AAED,aAAO,EAAE,GAAGV,KAAL;AAAYH,QAAAA,MAAM,EAAES;AAApB,OAAP;;AAEF;AACE,aAAON,KAAP;AAlCJ;AAoCD,CAtCD;;AAwCA,eAAeD,OAAf;AAEA","sourcesContent":["export const initialState = {\n  basket: [],\n  user: null,\n}\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case 'SET_USER': // update the user when they login/logout\n      return {\n        ...state,\n        user: action.user\n      }\n    case 'ADD_TO_BASKET':\n      // logic for adding item to basket\n      return { \n        ...state,\n        basket: [...state.basket, action.item],\n      }\n      \n    case 'REMOVE_FROM_BASKET':\n      // logic for removing item from basket\n\n      // cloned the basket\n      let newBasket = [...state.basket]\n\n      const index = state.basket.findIndex((basketItem) => basketItem.id === action.id)\n\n      if (index >= 0) {\n        // item exists in basket, remove it\n        newBasket.splice(index, 1)\n        \n      } else {\n        console.warn(\n          `Can't remove product (id ${action.id}) as its not in basket`\n        )\n      }\n\n      return { ...state, basket: newBasket }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n\n/* \n\n*/"]},"metadata":{},"sourceType":"module"}